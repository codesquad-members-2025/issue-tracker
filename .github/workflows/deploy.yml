name: Deploy Fullstack App to EC2

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v3

      - name: ☕ Setup JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🪠 Set Frontend Environment
        working-directory: fe
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.FRONTEND_API_BASE_URL }}" > .env.production

      - name: 🧱 Build Frontend
        working-directory: fe
        run: |
          npm install
          npm run build

      - name: 🧱 Build Backend
        working-directory: be
        run: |
          ./gradlew clean bootJar -x test

      - name: 📦 Bundle for Deployment
        run: |
          mkdir -p bundle/frontend
          mkdir -p bundle/scripts

          # ✅ .env 파일 생성
          echo "JWT_ACCESS_KEY=${{ secrets.JWT_ACCESS_KEY }}" > bundle/.env
          echo "JWT_REFRESH_KEY=${{ secrets.JWT_REFRESH_KEY }}" >> bundle/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> bundle/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> bundle/.env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> bundle/.env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> bundle/.env
          echo "S3_URL_NAME=${{ secrets.S3_URL_NAME }}" >> bundle/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> bundle/.env
          echo "OAUTH_CLIENT_ID"=${{secrets.OAUTH_CLIENT_ID}} >> bundle/.env
          echo "OAUTH_CLIENT_SECRET"=${{secrets.OAUTH_CLIENT_SECRET}} >> bundle/.env
          echo "OAUTH_REDIRECT_URI"=${{secrets.OAUTH_REDIRECT_URI}} >> bundle/.env
          echo "FRONTEND_API_BASE_URL=${{ secrets.FRONTEND_API_BASE_URL }}" >> bundle/.env

          # ✅ 실행 스크립트 복사 (.github/workflows/deploy-scripts 에서)
          cp .github/workflows/deploy-scripts/start.sh bundle/scripts/start.sh
          cp .github/workflows/deploy-scripts/stop.sh bundle/scripts/stop.sh
          chmod +x bundle/scripts/*.sh

          # ✅ 프론트 빌드 결과 복사
          cp -r fe/dist/* bundle/frontend/

          # ✅ 최신 JAR 복사
          JAR_PATH=$(ls -t be/build/libs/*.jar | head -n 1)
          echo "✅ 최신 JAR: $JAR_PATH"
          cp "$JAR_PATH" bundle/app.jar

          # ✅ 압축
          zip -r deploy.zip bundle

      - name: 🚀 Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.zip"
          target: "/home/ubuntu"

      - name: 💻 Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🧹 기존 배포 디렉토리 제거"
            sudo rm -rf /home/ubuntu/app

            echo "📦 배포 압축 해제"
            unzip -o /home/ubuntu/deploy.zip -d /home/ubuntu/app

            echo "📁 프론트 정적 리소스 이동"
            mv /home/ubuntu/app/bundle/frontend /home/ubuntu/app/frontend || true

            echo "🛑 기존 앱 종료 중..."
            bash /home/ubuntu/app/bundle/scripts/stop.sh

            echo "🚀 새 애플리케이션 실행..."
            bash /home/ubuntu/app/bundle/scripts/start.sh

            sleep 3
            echo "📄 서버 로그 출력 (상위 100줄)"
            tail -n 100 /home/ubuntu/app/app.log || echo "⚠️ 로그가 아직 생성되지 않았을 수 있습니다."
